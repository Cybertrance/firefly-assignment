name: Go Application CI

# Triggers the workflow on push or pull request to the main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Run tests on the Go application (common for both Linux and Windows)
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.1" # Specify the Go version you're using

      # Step 3: Cache Go modules to speed up subsequent runs
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: go mod download

      # Step 5: Run tests (run all unit tests in the project)
      - name: Run tests
        run: go test ./... -v # This will run all tests in the project

  # Job 2: Build binaries for both Linux and Windows platforms
  build:
    needs: test # This ensures the build only runs after the test job passes
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows] # Build for Linux and Windows
        goarch: [amd64] # Specify the architecture (64-bit)

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23.1"

      # Step 3: Cache Go modules to speed up subsequent builds
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: go mod download

      # Step 5: Build application for specified platform (Linux or Windows)
      - name: Build application
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: go build -o build/my-go-app-${{ matrix.goos }}-${{ matrix.goarch }} . # Output different binaries for each OS

      # Step 6: Copy static files (if any)
      - name: Copy static files
        run: |
          mkdir -p build/static  # Create the build directory if it doesn't exist
          cp -R static/* build/static/  # Copy static files to the build directory

      # Step 7: Upload build artifacts (Optional)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts-${{ matrix.goos }}-${{ matrix.goarch }}
          path: build/
